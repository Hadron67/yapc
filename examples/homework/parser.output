
i0
[ 0: (accept) -> . program, { <EOF> } ]* (s1)
[ 1: program -> . subProgram, { <EOF> } ] (s2)
[ 2: subProgram -> . <begin> declList <;> stmtList <end>, { <EOF> } ] (s3)

i1
[ 0: (accept) -> program ., { <EOF> } ]* (r)

i2
[ 1: program -> subProgram ., { <EOF> } ]* (r)

i3
[ 2: subProgram -> <begin> . declList <;> stmtList <end>, { <EOF> } ]* (s4)
[ 3: declList -> . declList <;> decl, { <;> } ] (s4)
[ 4: declList -> . decl, { <;> } ] (s56)
[ 5: decl -> . varDecl, { <;> } ] (s57)
[ 6: decl -> . funcDecl, { <;> } ] (s58)
[ 7: varDecl -> . <integer> varID, { <;> } ] (s59)
[ 9: funcDecl -> . <integer> <function> <ID> <(> argDefList <)> <;> funcBody, { <;> } ] (s59)

i4
[ 2: subProgram -> <begin> declList . <;> stmtList <end>, { <EOF> } ]* (s5)
[ 3: declList -> declList . <;> decl, { <;> } ]* (s5)

i5
[ 2: subProgram -> <begin> declList <;> . stmtList <end>, { <EOF> } ]* (s6)
[ 3: declList -> declList <;> . decl, { <;> } ]* (s10)
[ 12: stmtList -> . stmt, { <end>,<;> } ] (s11)
[ 13: stmtList -> . stmtList <;> stmt, { <end>,<;> } ] (s6)
[ 5: decl -> . varDecl, { <;> } ] (s57)
[ 6: decl -> . funcDecl, { <;> } ] (s58)
[ 14: stmt -> . readStmt, { <end>,<;> } ] (s12)
[ 15: stmt -> . writeStmt, { <end>,<;> } ] (s13)
[ 16: stmt -> . assignStmt, { <end>,<;> } ] (s14)
[ 17: stmt -> . ifStmt, { <end>,<;> } ] (s15)
[ 7: varDecl -> . <integer> varID, { <;> } ] (s59)
[ 9: funcDecl -> . <integer> <function> <ID> <(> argDefList <)> <;> funcBody, { <;> } ] (s59)
[ 18: readStmt -> . <read> <(> varID <)>, { <end>,<;> } ] (s16)
[ 19: writeStmt -> . <write> <(> varID <)>, { <end>,<;> } ] (s20)
[ 20: assignStmt -> . varID <:=> expr, { <end>,<;> } ] (s24)
[ 29: ifStmt -> . <if> cond <then> stmt <else> stmt, { <end>,<;> } ] (s27)
[ 8: varID -> . <ID>, { <:=> } ] (s74)

i6
[ 2: subProgram -> <begin> declList <;> stmtList . <end>, { <EOF> } ]* (s7)
[ 13: stmtList -> stmtList . <;> stmt, { <end>,<;> } ]* (s8)

i7
[ 2: subProgram -> <begin> declList <;> stmtList <end> ., { <EOF> } ]* (r)

i8
[ 13: stmtList -> stmtList <;> . stmt, { <end>,<;> } ]* (s9)
[ 14: stmt -> . readStmt, { <end>,<;> } ] (s12)
[ 15: stmt -> . writeStmt, { <end>,<;> } ] (s13)
[ 16: stmt -> . assignStmt, { <end>,<;> } ] (s14)
[ 17: stmt -> . ifStmt, { <end>,<;> } ] (s15)
[ 18: readStmt -> . <read> <(> varID <)>, { <end>,<;> } ] (s16)
[ 19: writeStmt -> . <write> <(> varID <)>, { <end>,<;> } ] (s20)
[ 20: assignStmt -> . varID <:=> expr, { <end>,<;> } ] (s24)
[ 29: ifStmt -> . <if> cond <then> stmt <else> stmt, { <end>,<;> } ] (s27)
[ 8: varID -> . <ID>, { <:=> } ] (s74)

i9
[ 13: stmtList -> stmtList <;> stmt ., { <end>,<;> } ]* (r)

i10
[ 3: declList -> declList <;> decl ., { <;> } ]* (r)

i11
[ 12: stmtList -> stmt ., { <end>,<;> } ]* (r)

i12
[ 14: stmt -> readStmt ., { <end>,<else>,<;> } ]* (r)

i13
[ 15: stmt -> writeStmt ., { <end>,<else>,<;> } ]* (r)

i14
[ 16: stmt -> assignStmt ., { <end>,<else>,<;> } ]* (r)

i15
[ 17: stmt -> ifStmt ., { <end>,<else>,<;> } ]* (r)

i16
[ 18: readStmt -> <read> . <(> varID <)>, { <end>,<else>,<;> } ]* (s17)

i17
[ 18: readStmt -> <read> <(> . varID <)>, { <end>,<else>,<;> } ]* (s18)
[ 8: varID -> . <ID>, { <)> } ] (s74)

i18
[ 18: readStmt -> <read> <(> varID . <)>, { <end>,<else>,<;> } ]* (s19)

i19
[ 18: readStmt -> <read> <(> varID <)> ., { <end>,<else>,<;> } ]* (r)

i20
[ 19: writeStmt -> <write> . <(> varID <)>, { <end>,<else>,<;> } ]* (s21)

i21
[ 19: writeStmt -> <write> <(> . varID <)>, { <end>,<else>,<;> } ]* (s22)
[ 8: varID -> . <ID>, { <)> } ] (s74)

i22
[ 19: writeStmt -> <write> <(> varID . <)>, { <end>,<else>,<;> } ]* (s23)

i23
[ 19: writeStmt -> <write> <(> varID <)> ., { <end>,<else>,<;> } ]* (r)

i24
[ 20: assignStmt -> varID . <:=> expr, { <end>,<else>,<;> } ]* (s25)

i25
[ 20: assignStmt -> varID <:=> . expr, { <end>,<else>,<;> } ]* (s26)
[ 21: expr -> . expr <-> term, { <end>,<else>,<->,<;> } ] (s26)
[ 22: expr -> . term, { <end>,<else>,<->,<;> } ] (s46)
[ 23: term -> . term <*> factor, { <end>,<else>,<->,<*>,<;> } ] (s46)
[ 24: term -> . factor, { <end>,<else>,<->,<*>,<;> } ] (s47)
[ 25: factor -> . constant, { <end>,<else>,<->,<*>,<;> } ] (s48)
[ 26: factor -> . varID, { <end>,<else>,<->,<*>,<;> } ] (s49)
[ 27: factor -> . funcCall, { <end>,<else>,<->,<*>,<;> } ] (s50)
[ 28: constant -> . <NUM>, { <end>,<else>,<->,<*>,<;> } ] (s51)
[ 8: varID -> . <ID>, { <end>,<else>,<->,<*>,<;> } ] (s52)
[ 37: funcCall -> . <ID> <(> expr <)>, { <end>,<else>,<->,<*>,<;> } ] (s52)

i26
[ 20: assignStmt -> varID <:=> expr ., { <end>,<else>,<;> } ]* (r)
[ 21: expr -> expr . <-> term, { <end>,<else>,<->,<;> } ]* (s36)

i27
[ 29: ifStmt -> <if> . cond <then> stmt <else> stmt, { <end>,<else>,<;> } ]* (s28)
[ 30: cond -> . expr condOptr expr, { <then> } ] (s33)
[ 21: expr -> . expr <-> term, { <=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<-> } ] (s33)
[ 22: expr -> . term, { <=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<-> } ] (s46)
[ 23: term -> . term <*> factor, { <=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*> } ] (s46)
[ 24: term -> . factor, { <=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*> } ] (s47)
[ 25: factor -> . constant, { <=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*> } ] (s48)
[ 26: factor -> . varID, { <=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*> } ] (s49)
[ 27: factor -> . funcCall, { <=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*> } ] (s50)
[ 28: constant -> . <NUM>, { <=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*> } ] (s51)
[ 8: varID -> . <ID>, { <=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*> } ] (s52)
[ 37: funcCall -> . <ID> <(> expr <)>, { <=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*> } ] (s52)

i28
[ 29: ifStmt -> <if> cond . <then> stmt <else> stmt, { <end>,<else>,<;> } ]* (s29)

i29
[ 29: ifStmt -> <if> cond <then> . stmt <else> stmt, { <end>,<else>,<;> } ]* (s30)
[ 14: stmt -> . readStmt, { <else> } ] (s12)
[ 15: stmt -> . writeStmt, { <else> } ] (s13)
[ 16: stmt -> . assignStmt, { <else> } ] (s14)
[ 17: stmt -> . ifStmt, { <else> } ] (s15)
[ 18: readStmt -> . <read> <(> varID <)>, { <else> } ] (s16)
[ 19: writeStmt -> . <write> <(> varID <)>, { <else> } ] (s20)
[ 20: assignStmt -> . varID <:=> expr, { <else> } ] (s24)
[ 29: ifStmt -> . <if> cond <then> stmt <else> stmt, { <else> } ] (s27)
[ 8: varID -> . <ID>, { <:=> } ] (s74)

i30
[ 29: ifStmt -> <if> cond <then> stmt . <else> stmt, { <end>,<else>,<;> } ]* (s31)

i31
[ 29: ifStmt -> <if> cond <then> stmt <else> . stmt, { <end>,<else>,<;> } ]* (s32)
[ 14: stmt -> . readStmt, { <end>,<else>,<;> } ] (s12)
[ 15: stmt -> . writeStmt, { <end>,<else>,<;> } ] (s13)
[ 16: stmt -> . assignStmt, { <end>,<else>,<;> } ] (s14)
[ 17: stmt -> . ifStmt, { <end>,<else>,<;> } ] (s15)
[ 18: readStmt -> . <read> <(> varID <)>, { <end>,<else>,<;> } ] (s16)
[ 19: writeStmt -> . <write> <(> varID <)>, { <end>,<else>,<;> } ] (s20)
[ 20: assignStmt -> . varID <:=> expr, { <end>,<else>,<;> } ] (s24)
[ 29: ifStmt -> . <if> cond <then> stmt <else> stmt, { <end>,<else>,<;> } ] (s27)
[ 8: varID -> . <ID>, { <:=> } ] (s74)

i32
[ 29: ifStmt -> <if> cond <then> stmt <else> stmt ., { <end>,<else>,<;> } ]* (r)

i33
[ 30: cond -> expr . condOptr expr, { <then> } ]* (s34)
[ 21: expr -> expr . <-> term, { <=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<-> } ]* (s36)
[ 31: condOptr -> . <lt>, { <ID>,<NUM> } ] (s40)
[ 32: condOptr -> . <gt>, { <ID>,<NUM> } ] (s41)
[ 33: condOptr -> . <ltoe>, { <ID>,<NUM> } ] (s42)
[ 34: condOptr -> . <gtoe>, { <ID>,<NUM> } ] (s43)
[ 35: condOptr -> . <=>, { <ID>,<NUM> } ] (s44)
[ 36: condOptr -> . <ne>, { <ID>,<NUM> } ] (s45)

i34
[ 30: cond -> expr condOptr . expr, { <then> } ]* (s35)
[ 21: expr -> . expr <-> term, { <then>,<-> } ] (s35)
[ 22: expr -> . term, { <then>,<-> } ] (s46)
[ 23: term -> . term <*> factor, { <then>,<->,<*> } ] (s46)
[ 24: term -> . factor, { <then>,<->,<*> } ] (s47)
[ 25: factor -> . constant, { <then>,<->,<*> } ] (s48)
[ 26: factor -> . varID, { <then>,<->,<*> } ] (s49)
[ 27: factor -> . funcCall, { <then>,<->,<*> } ] (s50)
[ 28: constant -> . <NUM>, { <then>,<->,<*> } ] (s51)
[ 8: varID -> . <ID>, { <then>,<->,<*> } ] (s52)
[ 37: funcCall -> . <ID> <(> expr <)>, { <then>,<->,<*> } ] (s52)

i35
[ 30: cond -> expr condOptr expr ., { <then> } ]* (r)
[ 21: expr -> expr . <-> term, { <then>,<-> } ]* (s36)

i36
[ 21: expr -> expr <-> . term, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<)>,<;> } ]* (s37)
[ 23: term -> . term <*> factor, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s37)
[ 24: term -> . factor, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s47)
[ 25: factor -> . constant, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s48)
[ 26: factor -> . varID, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s49)
[ 27: factor -> . funcCall, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s50)
[ 28: constant -> . <NUM>, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s51)
[ 8: varID -> . <ID>, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s52)
[ 37: funcCall -> . <ID> <(> expr <)>, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s52)

i37
[ 21: expr -> expr <-> term ., { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<)>,<;> } ]* (r)
[ 23: term -> term . <*> factor, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (s38)

i38
[ 23: term -> term <*> . factor, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (s39)
[ 25: factor -> . constant, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s48)
[ 26: factor -> . varID, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s49)
[ 27: factor -> . funcCall, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s50)
[ 28: constant -> . <NUM>, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s51)
[ 8: varID -> . <ID>, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s52)
[ 37: funcCall -> . <ID> <(> expr <)>, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ] (s52)

i39
[ 23: term -> term <*> factor ., { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (r)

i40
[ 31: condOptr -> <lt> ., { <ID>,<NUM> } ]* (r)

i41
[ 32: condOptr -> <gt> ., { <ID>,<NUM> } ]* (r)

i42
[ 33: condOptr -> <ltoe> ., { <ID>,<NUM> } ]* (r)

i43
[ 34: condOptr -> <gtoe> ., { <ID>,<NUM> } ]* (r)

i44
[ 35: condOptr -> <=> ., { <ID>,<NUM> } ]* (r)

i45
[ 36: condOptr -> <ne> ., { <ID>,<NUM> } ]* (r)

i46
[ 22: expr -> term ., { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<)>,<;> } ]* (r)
[ 23: term -> term . <*> factor, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (s38)

i47
[ 24: term -> factor ., { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (r)

i48
[ 25: factor -> constant ., { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (r)

i49
[ 26: factor -> varID ., { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (r)

i50
[ 27: factor -> funcCall ., { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (r)

i51
[ 28: constant -> <NUM> ., { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (r)

i52
[ 8: varID -> <ID> ., { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (r)
[ 37: funcCall -> <ID> . <(> expr <)>, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (s53)

i53
[ 37: funcCall -> <ID> <(> . expr <)>, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (s54)
[ 21: expr -> . expr <-> term, { <->,<)> } ] (s54)
[ 22: expr -> . term, { <->,<)> } ] (s46)
[ 23: term -> . term <*> factor, { <->,<*>,<)> } ] (s46)
[ 24: term -> . factor, { <->,<*>,<)> } ] (s47)
[ 25: factor -> . constant, { <->,<*>,<)> } ] (s48)
[ 26: factor -> . varID, { <->,<*>,<)> } ] (s49)
[ 27: factor -> . funcCall, { <->,<*>,<)> } ] (s50)
[ 28: constant -> . <NUM>, { <->,<*>,<)> } ] (s51)
[ 8: varID -> . <ID>, { <->,<*>,<)> } ] (s52)
[ 37: funcCall -> . <ID> <(> expr <)>, { <->,<*>,<)> } ] (s52)

i54
[ 37: funcCall -> <ID> <(> expr . <)>, { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (s55)
[ 21: expr -> expr . <-> term, { <->,<)> } ]* (s36)

i55
[ 37: funcCall -> <ID> <(> expr <)> ., { <end>,<then>,<else>,<=>,<ne>,<ltoe>,<lt>,<gtoe>,<gt>,<->,<*>,<)>,<;> } ]* (r)

i56
[ 4: declList -> decl ., { <;> } ]* (r)

i57
[ 5: decl -> varDecl ., { <;> } ]* (r)

i58
[ 6: decl -> funcDecl ., { <;> } ]* (r)

i59
[ 7: varDecl -> <integer> . varID, { <;> } ]* (s60)
[ 9: funcDecl -> <integer> . <function> <ID> <(> argDefList <)> <;> funcBody, { <;> } ]* (s61)
[ 8: varID -> . <ID>, { <;> } ] (s74)

i60
[ 7: varDecl -> <integer> varID ., { <;> } ]* (r)

i61
[ 9: funcDecl -> <integer> <function> . <ID> <(> argDefList <)> <;> funcBody, { <;> } ]* (s62)

i62
[ 9: funcDecl -> <integer> <function> <ID> . <(> argDefList <)> <;> funcBody, { <;> } ]* (s63)

i63
[ 9: funcDecl -> <integer> <function> <ID> <(> . argDefList <)> <;> funcBody, { <;> } ]* (s64)
[ 10: argDefList -> . varID, { <)> } ] (s73)
[ 8: varID -> . <ID>, { <)> } ] (s74)

i64
[ 9: funcDecl -> <integer> <function> <ID> <(> argDefList . <)> <;> funcBody, { <;> } ]* (s65)

i65
[ 9: funcDecl -> <integer> <function> <ID> <(> argDefList <)> . <;> funcBody, { <;> } ]* (s66)

i66
[ 9: funcDecl -> <integer> <function> <ID> <(> argDefList <)> <;> . funcBody, { <;> } ]* (s67)
[ 11: funcBody -> . <begin> declList <;> stmtList <end>, { <;> } ] (s68)

i67
[ 9: funcDecl -> <integer> <function> <ID> <(> argDefList <)> <;> funcBody ., { <;> } ]* (r)

i68
[ 11: funcBody -> <begin> . declList <;> stmtList <end>, { <;> } ]* (s69)
[ 3: declList -> . declList <;> decl, { <;> } ] (s69)
[ 4: declList -> . decl, { <;> } ] (s56)
[ 5: decl -> . varDecl, { <;> } ] (s57)
[ 6: decl -> . funcDecl, { <;> } ] (s58)
[ 7: varDecl -> . <integer> varID, { <;> } ] (s59)
[ 9: funcDecl -> . <integer> <function> <ID> <(> argDefList <)> <;> funcBody, { <;> } ] (s59)

i69
[ 11: funcBody -> <begin> declList . <;> stmtList <end>, { <;> } ]* (s70)
[ 3: declList -> declList . <;> decl, { <;> } ]* (s70)

i70
[ 11: funcBody -> <begin> declList <;> . stmtList <end>, { <;> } ]* (s71)
[ 3: declList -> declList <;> . decl, { <;> } ]* (s10)
[ 12: stmtList -> . stmt, { <end>,<;> } ] (s11)
[ 13: stmtList -> . stmtList <;> stmt, { <end>,<;> } ] (s71)
[ 5: decl -> . varDecl, { <;> } ] (s57)
[ 6: decl -> . funcDecl, { <;> } ] (s58)
[ 14: stmt -> . readStmt, { <end>,<;> } ] (s12)
[ 15: stmt -> . writeStmt, { <end>,<;> } ] (s13)
[ 16: stmt -> . assignStmt, { <end>,<;> } ] (s14)
[ 17: stmt -> . ifStmt, { <end>,<;> } ] (s15)
[ 7: varDecl -> . <integer> varID, { <;> } ] (s59)
[ 9: funcDecl -> . <integer> <function> <ID> <(> argDefList <)> <;> funcBody, { <;> } ] (s59)
[ 18: readStmt -> . <read> <(> varID <)>, { <end>,<;> } ] (s16)
[ 19: writeStmt -> . <write> <(> varID <)>, { <end>,<;> } ] (s20)
[ 20: assignStmt -> . varID <:=> expr, { <end>,<;> } ] (s24)
[ 29: ifStmt -> . <if> cond <then> stmt <else> stmt, { <end>,<;> } ] (s27)
[ 8: varID -> . <ID>, { <:=> } ] (s74)

i71
[ 11: funcBody -> <begin> declList <;> stmtList . <end>, { <;> } ]* (s72)
[ 13: stmtList -> stmtList . <;> stmt, { <end>,<;> } ]* (s8)

i72
[ 11: funcBody -> <begin> declList <;> stmtList <end> ., { <;> } ]* (r)

i73
[ 10: argDefList -> varID ., { <)> } ]* (r)

i74
[ 8: varID -> <ID> ., { <:=>,<)>,<;> } ]* (r)

