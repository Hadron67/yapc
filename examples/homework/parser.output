i0
[ 0: (accept) -> . program ]* (s1)
[ 1: program -> . subProgram ] (s2)
[ 2: subProgram -> . <begin> declList <;> stmtList <end> ] (s3)

i1
[ 0: (accept) -> program . ]* (r)

i2
[ 1: program -> subProgram . ]* (r)

i3
[ 2: subProgram -> <begin> . declList <;> stmtList <end> ]* (s4)
[ 4: declList -> . decl ] (s54)
[ 3: declList -> . declList <;> decl ] (s4)
[ 6: decl -> . funcDecl ] (s55)
[ 5: decl -> . varDecl ] (s56)
[ 9: funcDecl -> . <integer> <function> <ID> <(> argDefList <)> <;> funcBody ] (s57)
[ 7: varDecl -> . <integer> varID ] (s57)

i4
[ 2: subProgram -> <begin> declList . <;> stmtList <end> ]* (s5)
[ 3: declList -> declList . <;> decl ]* (s5)

i5
[ 2: subProgram -> <begin> declList <;> . stmtList <end> ]* (s6)
[ 3: declList -> declList <;> . decl ]* (s10)
[ 13: stmtList -> . stmtList <;> stmt ] (s6)
[ 12: stmtList -> . stmt ] (s11)
[ 6: decl -> . funcDecl ] (s55)
[ 5: decl -> . varDecl ] (s56)
[ 17: stmt -> . ifStmt ] (s12)
[ 16: stmt -> . assignStmt ] (s13)
[ 15: stmt -> . writeStmt ] (s14)
[ 14: stmt -> . readStmt ] (s15)
[ 9: funcDecl -> . <integer> <function> <ID> <(> argDefList <)> <;> funcBody ] (s57)
[ 7: varDecl -> . <integer> varID ] (s57)
[ 27: ifStmt -> . <if> cond <then> stmt <else> stmt ] (s16)
[ 20: assignStmt -> . varID <:=> expr ] (s31)
[ 19: writeStmt -> . <write> <(> varID <)> ] (s46)
[ 18: readStmt -> . <read> <(> varID <)> ] (s50)
[ 8: varID -> . <ID> ] (s72)

i6
[ 2: subProgram -> <begin> declList <;> stmtList . <end> ]* (s7)
[ 13: stmtList -> stmtList . <;> stmt ]* (s8)

i7
[ 2: subProgram -> <begin> declList <;> stmtList <end> . ]* (r)

i8
[ 13: stmtList -> stmtList <;> . stmt ]* (s9)
[ 17: stmt -> . ifStmt ] (s12)
[ 16: stmt -> . assignStmt ] (s13)
[ 15: stmt -> . writeStmt ] (s14)
[ 14: stmt -> . readStmt ] (s15)
[ 27: ifStmt -> . <if> cond <then> stmt <else> stmt ] (s16)
[ 20: assignStmt -> . varID <:=> expr ] (s31)
[ 19: writeStmt -> . <write> <(> varID <)> ] (s46)
[ 18: readStmt -> . <read> <(> varID <)> ] (s50)
[ 8: varID -> . <ID> ] (s72)

i9
[ 13: stmtList -> stmtList <;> stmt . ]* (r)

i10
[ 3: declList -> declList <;> decl . ]* (r)

i11
[ 12: stmtList -> stmt . ]* (r)

i12
[ 17: stmt -> ifStmt . ]* (r)

i13
[ 16: stmt -> assignStmt . ]* (r)

i14
[ 15: stmt -> writeStmt . ]* (r)

i15
[ 14: stmt -> readStmt . ]* (r)

i16
[ 27: ifStmt -> <if> . cond <then> stmt <else> stmt ]* (s17)
[ 28: cond -> . expr condOptr expr ] (s22)
[ 25: expr -> . funcCall ] (s38)
[ 24: expr -> . varID ] (s39)
[ 23: expr -> . constant ] (s40)
[ 22: expr -> . expr <*> expr ] (s22)
[ 21: expr -> . expr <-> expr ] (s22)
[ 35: funcCall -> . <ID> <(> expr <)> ] (s41)
[ 8: varID -> . <ID> ] (s41)
[ 26: constant -> . <NUM> ] (s45)

i17
[ 27: ifStmt -> <if> cond . <then> stmt <else> stmt ]* (s18)

i18
[ 27: ifStmt -> <if> cond <then> . stmt <else> stmt ]* (s19)
[ 17: stmt -> . ifStmt ] (s12)
[ 16: stmt -> . assignStmt ] (s13)
[ 15: stmt -> . writeStmt ] (s14)
[ 14: stmt -> . readStmt ] (s15)
[ 27: ifStmt -> . <if> cond <then> stmt <else> stmt ] (s16)
[ 20: assignStmt -> . varID <:=> expr ] (s31)
[ 19: writeStmt -> . <write> <(> varID <)> ] (s46)
[ 18: readStmt -> . <read> <(> varID <)> ] (s50)
[ 8: varID -> . <ID> ] (s72)

i19
[ 27: ifStmt -> <if> cond <then> stmt . <else> stmt ]* (s20)

i20
[ 27: ifStmt -> <if> cond <then> stmt <else> . stmt ]* (s21)
[ 17: stmt -> . ifStmt ] (s12)
[ 16: stmt -> . assignStmt ] (s13)
[ 15: stmt -> . writeStmt ] (s14)
[ 14: stmt -> . readStmt ] (s15)
[ 27: ifStmt -> . <if> cond <then> stmt <else> stmt ] (s16)
[ 20: assignStmt -> . varID <:=> expr ] (s31)
[ 19: writeStmt -> . <write> <(> varID <)> ] (s46)
[ 18: readStmt -> . <read> <(> varID <)> ] (s50)
[ 8: varID -> . <ID> ] (s72)

i21
[ 27: ifStmt -> <if> cond <then> stmt <else> stmt . ]* (r)

i22
[ 28: cond -> expr . condOptr expr ]* (s23)
[ 22: expr -> expr . <*> expr ]* (s34)
[ 21: expr -> expr . <-> expr ]* (s36)
[ 34: condOptr -> . <ne> ] (s25)
[ 33: condOptr -> . <=> ] (s26)
[ 32: condOptr -> . <gtoe> ] (s27)
[ 31: condOptr -> . <ltoe> ] (s28)
[ 30: condOptr -> . <gt> ] (s29)
[ 29: condOptr -> . <lt> ] (s30)

i23
[ 28: cond -> expr condOptr . expr ]* (s24)
[ 25: expr -> . funcCall ] (s38)
[ 24: expr -> . varID ] (s39)
[ 23: expr -> . constant ] (s40)
[ 22: expr -> . expr <*> expr ] (s24)
[ 21: expr -> . expr <-> expr ] (s24)
[ 35: funcCall -> . <ID> <(> expr <)> ] (s41)
[ 8: varID -> . <ID> ] (s41)
[ 26: constant -> . <NUM> ] (s45)

i24
[ 28: cond -> expr condOptr expr . ]* (r)
[ 22: expr -> expr . <*> expr ]* (s34)
[ 21: expr -> expr . <-> expr ]* (s36)

i25
[ 34: condOptr -> <ne> . ]* (r)

i26
[ 33: condOptr -> <=> . ]* (r)

i27
[ 32: condOptr -> <gtoe> . ]* (r)

i28
[ 31: condOptr -> <ltoe> . ]* (r)

i29
[ 30: condOptr -> <gt> . ]* (r)

i30
[ 29: condOptr -> <lt> . ]* (r)

i31
[ 20: assignStmt -> varID . <:=> expr ]* (s32)

i32
[ 20: assignStmt -> varID <:=> . expr ]* (s33)
[ 25: expr -> . funcCall ] (s38)
[ 24: expr -> . varID ] (s39)
[ 23: expr -> . constant ] (s40)
[ 22: expr -> . expr <*> expr ] (s33)
[ 21: expr -> . expr <-> expr ] (s33)
[ 35: funcCall -> . <ID> <(> expr <)> ] (s41)
[ 8: varID -> . <ID> ] (s41)
[ 26: constant -> . <NUM> ] (s45)

i33
[ 20: assignStmt -> varID <:=> expr . ]* (r)
[ 22: expr -> expr . <*> expr ]* (s34)
[ 21: expr -> expr . <-> expr ]* (s36)

i34
[ 22: expr -> expr <*> . expr ]* (s35)
[ 25: expr -> . funcCall ] (s38)
[ 24: expr -> . varID ] (s39)
[ 23: expr -> . constant ] (s40)
[ 22: expr -> . expr <*> expr ] (s35)
[ 21: expr -> . expr <-> expr ] (s35)
[ 35: funcCall -> . <ID> <(> expr <)> ] (s41)
[ 8: varID -> . <ID> ] (s41)
[ 26: constant -> . <NUM> ] (s45)

i35
[ 22: expr -> expr <*> expr . ]* (r)
[ 22: expr -> expr . <*> expr ]* (s34)
[ 21: expr -> expr . <-> expr ]* (s36)

i36
[ 21: expr -> expr <-> . expr ]* (s37)
[ 25: expr -> . funcCall ] (s38)
[ 24: expr -> . varID ] (s39)
[ 23: expr -> . constant ] (s40)
[ 22: expr -> . expr <*> expr ] (s37)
[ 21: expr -> . expr <-> expr ] (s37)
[ 35: funcCall -> . <ID> <(> expr <)> ] (s41)
[ 8: varID -> . <ID> ] (s41)
[ 26: constant -> . <NUM> ] (s45)

i37
[ 21: expr -> expr <-> expr . ]* (r)
[ 22: expr -> expr . <*> expr ]* (s34)
[ 21: expr -> expr . <-> expr ]* (s36)

i38
[ 25: expr -> funcCall . ]* (r)

i39
[ 24: expr -> varID . ]* (r)

i40
[ 23: expr -> constant . ]* (r)

i41
[ 35: funcCall -> <ID> . <(> expr <)> ]* (s42)
[ 8: varID -> <ID> . ]* (r)

i42
[ 35: funcCall -> <ID> <(> . expr <)> ]* (s43)
[ 25: expr -> . funcCall ] (s38)
[ 24: expr -> . varID ] (s39)
[ 23: expr -> . constant ] (s40)
[ 22: expr -> . expr <*> expr ] (s43)
[ 21: expr -> . expr <-> expr ] (s43)
[ 35: funcCall -> . <ID> <(> expr <)> ] (s41)
[ 8: varID -> . <ID> ] (s41)
[ 26: constant -> . <NUM> ] (s45)

i43
[ 35: funcCall -> <ID> <(> expr . <)> ]* (s44)
[ 22: expr -> expr . <*> expr ]* (s34)
[ 21: expr -> expr . <-> expr ]* (s36)

i44
[ 35: funcCall -> <ID> <(> expr <)> . ]* (r)

i45
[ 26: constant -> <NUM> . ]* (r)

i46
[ 19: writeStmt -> <write> . <(> varID <)> ]* (s47)

i47
[ 19: writeStmt -> <write> <(> . varID <)> ]* (s48)
[ 8: varID -> . <ID> ] (s72)

i48
[ 19: writeStmt -> <write> <(> varID . <)> ]* (s49)

i49
[ 19: writeStmt -> <write> <(> varID <)> . ]* (r)

i50
[ 18: readStmt -> <read> . <(> varID <)> ]* (s51)

i51
[ 18: readStmt -> <read> <(> . varID <)> ]* (s52)
[ 8: varID -> . <ID> ] (s72)

i52
[ 18: readStmt -> <read> <(> varID . <)> ]* (s53)

i53
[ 18: readStmt -> <read> <(> varID <)> . ]* (r)

i54
[ 4: declList -> decl . ]* (r)

i55
[ 6: decl -> funcDecl . ]* (r)

i56
[ 5: decl -> varDecl . ]* (r)

i57
[ 9: funcDecl -> <integer> . <function> <ID> <(> argDefList <)> <;> funcBody ]* (s58)
[ 7: varDecl -> <integer> . varID ]* (s71)
[ 8: varID -> . <ID> ] (s72)

i58
[ 9: funcDecl -> <integer> <function> . <ID> <(> argDefList <)> <;> funcBody ]* (s59)

i59
[ 9: funcDecl -> <integer> <function> <ID> . <(> argDefList <)> <;> funcBody ]* (s60)

i60
[ 9: funcDecl -> <integer> <function> <ID> <(> . argDefList <)> <;> funcBody ]* (s61)
[ 10: argDefList -> . varID ] (s70)
[ 8: varID -> . <ID> ] (s72)

i61
[ 9: funcDecl -> <integer> <function> <ID> <(> argDefList . <)> <;> funcBody ]* (s62)

i62
[ 9: funcDecl -> <integer> <function> <ID> <(> argDefList <)> . <;> funcBody ]* (s63)

i63
[ 9: funcDecl -> <integer> <function> <ID> <(> argDefList <)> <;> . funcBody ]* (s64)
[ 11: funcBody -> . <begin> declList <;> stmtList <end> ] (s65)

i64
[ 9: funcDecl -> <integer> <function> <ID> <(> argDefList <)> <;> funcBody . ]* (r)

i65
[ 11: funcBody -> <begin> . declList <;> stmtList <end> ]* (s66)
[ 4: declList -> . decl ] (s54)
[ 3: declList -> . declList <;> decl ] (s66)
[ 6: decl -> . funcDecl ] (s55)
[ 5: decl -> . varDecl ] (s56)
[ 9: funcDecl -> . <integer> <function> <ID> <(> argDefList <)> <;> funcBody ] (s57)
[ 7: varDecl -> . <integer> varID ] (s57)

i66
[ 11: funcBody -> <begin> declList . <;> stmtList <end> ]* (s67)
[ 3: declList -> declList . <;> decl ]* (s67)

i67
[ 11: funcBody -> <begin> declList <;> . stmtList <end> ]* (s68)
[ 3: declList -> declList <;> . decl ]* (s10)
[ 13: stmtList -> . stmtList <;> stmt ] (s68)
[ 12: stmtList -> . stmt ] (s11)
[ 6: decl -> . funcDecl ] (s55)
[ 5: decl -> . varDecl ] (s56)
[ 17: stmt -> . ifStmt ] (s12)
[ 16: stmt -> . assignStmt ] (s13)
[ 15: stmt -> . writeStmt ] (s14)
[ 14: stmt -> . readStmt ] (s15)
[ 9: funcDecl -> . <integer> <function> <ID> <(> argDefList <)> <;> funcBody ] (s57)
[ 7: varDecl -> . <integer> varID ] (s57)
[ 27: ifStmt -> . <if> cond <then> stmt <else> stmt ] (s16)
[ 20: assignStmt -> . varID <:=> expr ] (s31)
[ 19: writeStmt -> . <write> <(> varID <)> ] (s46)
[ 18: readStmt -> . <read> <(> varID <)> ] (s50)
[ 8: varID -> . <ID> ] (s72)

i68
[ 11: funcBody -> <begin> declList <;> stmtList . <end> ]* (s69)
[ 13: stmtList -> stmtList . <;> stmt ]* (s8)

i69
[ 11: funcBody -> <begin> declList <;> stmtList <end> . ]* (r)

i70
[ 10: argDefList -> varID . ]* (r)

i71
[ 7: varDecl -> <integer> varID . ]* (r)

i72
[ 8: varID -> <ID> . ]* (r)

